--Settings
getgenv().Start = "Current Stage" -- Set to a number or "Current Stage"
getgenv().Finish = math.huge -- Set this to "math.huge" to quickly do all levels. If script isn't working, try setting this to an actual number.
getgenv().WaitBetweenTeleport = .5 -- Wait time if stage leaderstat isn't located.
getgenv().Looped = true -- On especially large obbies, all stages may not load until you get closer to them. Setting this to true will cause the script to continue to loop so you don't have to run the script again. To stop loop, execute this again as false.
getgenv().WarningsOn = false -- Set to true to get printed warnings.

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local function DoObby()
    local StartValue
    local leaderstats = player:WaitForChild("leaderstats")
    local stage = leaderstats:FindFirstChild("Stage") or leaderstats:FindFirstChild("Stages")
    if Start == "Current Stage" or Looped then
        if stage then
            StartValue = stage.Value
        elseif WarningsOn then
            if Start == "Current Stage" and Looped then
                warn("ERROR: Cannot determine Current Stage. Please turn off loop and enter the stage number manually. Alternatively, if there's a nearby teleport, please walk through there before trying again.")
            elseif Looped then
                warn("ERROR: Cannot determine Current Stage. Please try again without loop. Alternatively, if there's a nearby teleport, please walk through there before trying again.")
            else
                warn("ERROR: Cannot determine Current Stage. Please enter the stage number manually. Alternatively, if there's a nearby teleport, please walk through there before trying again.")
            end
        end
    else
        StartValue = Start
    end
    local checkpoints = {}
    local checkpointfolder = nil
    local loop = 0
    for _,v in pairs(workspace:GetDescendants()) do
        loop += 1
        if loop == 7000 then
            loop = 0
            task.wait()
        end
        if checkpointfolder then
            break
        end
        if v:IsA("BasePart") or v:FindFirstChildWhichIsA("BasePart") then
            local noletters = string.gsub(v.Name,"%a","")
            local nospaces = string.gsub(noletters,"%s","")
            local number = string.gsub(nospaces,"%p","")
            local IsNumberCheck = tonumber(number)
            if IsNumberCheck then
                local FoundStages = 0
                for _,v2 in pairs(v.Parent:GetChildren()) do
                    loop += 1
                    if loop == 7000 then
                        loop = 0
                        task.wait()
                    end
                    if v2:IsA("BasePart") or v2:FindFirstChildWhichIsA("BasePart") then
                        local noletters2 = string.gsub(v2.Name,"%a","")
                        local nospaces2 = string.gsub(noletters2,"%s","")
                        local number2 = string.gsub(nospaces2,"%p","")
                        local IsNumberCheck2 = tonumber(number2)
                        if IsNumberCheck2 then
                            if Finish == math.huge then
                                if IsNumberCheck2 >= StartValue and IsNumberCheck2 <= StartValue+10 then
                                    FoundStages += 1
                                end
                            else
                                if IsNumberCheck2 >= StartValue and IsNumberCheck2 <= Finish then
                                    FoundStages += 1
                                end
                            end
                        end
                    end
                end
                if Finish == math.huge and FoundStages >= 10 then
                    checkpointfolder = v.Parent
                    break
                elseif FoundStages >= Finish-StartValue then
                    checkpointfolder = v.Parent
                    break
                end
            end
        end
    end
    if checkpointfolder then
        for i = StartValue,Finish do
            local foundcheckpoint = false
            for _,checkpoint in pairs(checkpointfolder:GetChildren()) do
                local noletters = string.gsub(checkpoint.Name,"%a","")
                local nospaces = string.gsub(noletters,"%s","")
                local number = string.gsub(nospaces,"%p","")
                local checkpointnumber = tonumber(number)
                if checkpointnumber == i then
                    if checkpoint:IsA("BasePart") then
                        checkpoints[i] = checkpoint
                        foundcheckpoint = true
                        break
                    else
                        local basepart = checkpoint:FindFirstChildWhichIsA("BasePart")
                        if basepart then
                            checkpoints[i] = basepart
                        end
                    end
                end
            end
            if foundcheckpoint == false then
                break
            end
        end
        for i = StartValue,Finish do
            local character = player.Character or player.CharacterAdded:Wait()
            local v = checkpoints[i]
            print(tostring(v))
            if v then
                -- character:WaitForChild("HumanoidRootPart").CFrame = v.CFrame * CFrame.new(0,2,0)
                for _,v2 in pairs(character:GetChildren()) do
                    if v2:IsA("BasePart") then
                        v2.CFrame = v.CFrame * CFrame.new(0,2,0)
                    end
                end
                if stage then
                    repeat
                        task.wait()
                    until stage.Value == i
                else
                    task.wait(WaitBetweenTeleport)
                end
            else
                break
            end
        end
    elseif WarningsOn then
        if Finish == math.huge then
            warn("ERROR: Checkpoints not found! Try changing Finish to a number instead of math.huge!")
        else
            warn("ERROR: Checkpoints not found!")
        end
    end
end

if Looped then
    while Looped do
        DoObby()
        task.wait()
    end
else
    DoObby()
end
