getgenv().TeleportToPlayerKey = "Q"
getgenv().NoClipKey = "E"
getgenv().MagnetKey = "M"
getgenv().SetCamera = "L"
getgenv().FallKey = "F"
getgenv().AttackKey = "K"
getgenv().CopyPlayerListKey = "C"

getgenv().AttackOn = true
getgenv().AttackAllWithinRadius = true
getgenv().AttackRadius = 5
getgenv().SpeedOn = true
getgenv().Camera = true
getgenv().InfiniteJumpOn = true
getgenv().FallOn = true

getgenv().InfiniteJumpHeight = 50

getgenv().MagnetPosition = "Behind"
getgenv().MagnetSpeed = 10000
getgenv().MagnetDistance = 5

getgenv().CFrame1 = 0
getgenv().CFrame2 = 0
getgenv().CFrame3 = 0
getgenv().CFrameAngle1 = 0
getgenv().CFrameAngle2 = 0
getgenv().CFrameAngle3 = 0

local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
Player.CharacterAdded:Connect(function(v) Character = v end)
local UIS = game:GetService("UserInputService")

local NoClip = false
local Magnet = false
local CameraOn = false
local TweenService = nil
local RealGravity = tonumber(game.Workspace.Gravity)
local NoClipPartsTable = {}

local Speed = Character:WaitForChild("Humanoid").WalkSpeed
local OriginalSpeed = tonumber(Speed)
local Attacking = false
local TargetPlayer = nil
local Text


local function GetMagnetPosition()
    if MagnetPosition == "Over" then
        CFrame1 = 0
        CFrame2 = MagnetDistance
        CFrame3 = 0
        CFrameAngle1 = -90
        CFrameAngle2 = 0
        CFrameAngle3 = 0
    elseif MagnetPosition == "Under" then
        CFrame1 = 0
        CFrame2 = -MagnetDistance
        CFrame3 = 0
        CFrameAngle1 = 90
        CFrameAngle2 = 0
        CFrameAngle3 = 0
    elseif MagnetPosition == "Behind" then
        CFrame1 = 0
        CFrame2 = 0
        CFrame3 = MagnetDistance
        CFrameAngle1 = 0
        CFrameAngle2 = 0
        CFrameAngle3 = 0
    elseif MagnetPosition == "Front" then
        CFrame1 = 0
        CFrame2 = 0
        CFrame3 = -MagnetDistance
        CFrameAngle1 = 0
        CFrameAngle2 = 3.1
        CFrameAngle3 = 0
    elseif MagnetPosition == "Stand" then
        CFrame1 = 0
        CFrame2 = 0
        CFrame3 = -MagnetDistance
        CFrameAngle1 = 0
        CFrameAngle2 = 0
        CFrameAngle3 = 0
    elseif MagnetPosition == "GuardBack" then
        CFrame1 = 0
        CFrame2 = 0
        CFrame3 = MagnetDistance
        CFrameAngle1 = 0
        CFrameAngle2 = 3.1
        CFrameAngle3 = 0
    elseif MagnetPosition == "Platform" then
        CFrame1 = 0
        CFrame2 = -MagnetDistance
        CFrame3 = 0
        CFrameAngle1 = 0
        CFrameAngle2 = 0
        CFrameAngle3 = 0
    end
end

local function tween(target)
    GetMagnetPosition()
    if not Character or not Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    local target = pcall(function() return target.CFrame end) and target.CFrame or target
    TweenService = game:GetService("TweenService"):Create(Character.HumanoidRootPart, TweenInfo.new(Player:DistanceFromCharacter(target.Position)/MagnetSpeed, Enum.EasingStyle.Linear), {CFrame = target*CFrame.new(CFrame1,CFrame2,CFrame3) * CFrame.Angles(math.rad(CFrameAngle1), (CFrameAngle2), (CFrameAngle3))})
    if Magnet then
        TweenService:Play()
        wait(Player:DistanceFromCharacter(target.Position)/MagnetSpeed or not Magnet)
    end
end

--Target Gui
local TargetGui = Instance.new("ScreenGui")
local TargetTextBox = Instance.new("TextBox")

TargetGui.Parent = game:GetService("CoreGui")
TargetGui.Name = "Target Gui"

TargetTextBox.Parent = TargetGui
TargetTextBox.BackgroundColor3 = Color3.new(0.333333, 0.333333, 0.333333)
TargetTextBox.Position = UDim2.new(0, 0, 1, -25)
TargetTextBox.Size = UDim2.new(0, 150, 0, 25)
TargetTextBox.Font = Enum.Font.SourceSans
TargetTextBox.Text = "Insert Player Name"
TargetTextBox.TextColor3 = Color3.new(1, 1, 1)
TargetTextBox.TextScaled = true
TargetTextBox.TextSize = 14
TargetTextBox.TextWrapped = true
TargetTextBox.BackgroundTransparency = 0.6

local function Action(Object, Function) if Object ~= nil then Function(Object) end end
--Button Activate
UIS.InputBegan:connect(function(UserInput,gameProcessed)
    local TeleportToPlayerKeyUpper = TeleportToPlayerKey:upper()
    local MagnetKeyUpper = MagnetKey:upper()
    local NoClipKeyUpper = NoClipKey:upper()
    local SetCameraUpper = SetCamera:upper()
    local FallKeyUpper = FallKey:upper()
    local AttackKeyUpper = AttackKey:upper()
    local CopyPlayerListKeyUpper = CopyPlayerListKey:upper()
    if UserInput.UserInputType == Enum.UserInputType.Keyboard and gameProcessed == false then
        Text = string.lower(TargetTextBox.Text)
        local playerfound = false
        if playerfound == false then
            for i,v in pairs(Players:GetPlayers()) do
                if string.lower(v.Name) == Text then
                    playerfound = true
                    TargetPlayer = v
                    break
                end
            end
        end
        if playerfound == false then
            for i,v in pairs(Players:GetPlayers()) do
                if string.lower(v.DisplayName) == Text then
                    playerfound = true
                    TargetPlayer = v
                    break
                end
            end
        end
        if playerfound == false then
            for _,v in pairs(Players:GetPlayers()) do
                local playername = string.lower(v.Name)
                if string.find(playername,Text) then
                    playerfound = true
                    TargetPlayer = v
                    break
                end
            end
        end
        if playerfound == false then
            for i,v in pairs(Players:GetPlayers()) do
                local playername = string.lower(v.DisplayName)
                if string.find(playername,Text) then
                    playerfound = true
                    TargetPlayer = v
                    break
                end
            end
        end
    --Infinite Jump
        if InfiniteJumpOn and UserInput.KeyCode == Enum.KeyCode.Space then
            Action(Character.Humanoid, function(self)
                if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
                    Action(self.Parent.HumanoidRootPart, function(self)
                        self.Velocity = Vector3.new(0, InfiniteJumpHeight, 0)
                    end)
                else
                    pcall(function()
                        if Character.Humanoid.JumpPower <= 5 then
                            Action(self.Parent.HumanoidRootPart, function(self)
                                self.Velocity = Vector3.new(0, InfiniteJumpHeight, 0)
                            end)
                        end
                    end)
                end
            end)
        end
    --TeleportToPlayer
        if UserInput.KeyCode == Enum.KeyCode[TeleportToPlayerKeyUpper] then
            if TargetPlayer and TargetPlayer.Character and TargetPlayer.Character:FindFirstChild("HumanoidRootPart") and Character and Character:FindFirstChild("HumanoidRootPart") then
                Character:FindFirstChild("HumanoidRootPart").CFrame = TargetPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame * CFrame.new(0,2,0)
            end
        end
    --SetCameraToPlayer
        if UserInput.KeyCode == Enum.KeyCode[SetCameraUpper] then
            CameraOn = not CameraOn
        end
    --Magnet
        if UserInput.KeyCode == Enum.KeyCode[MagnetKeyUpper] then
            if Magnet == false then
                Magnet = true
                --NoClip = true
                spawn(function()
                    while Magnet == true do
                        game.Workspace.Gravity = 0
                        if Character and Character:FindFirstChild("HumanoidRootPart") then
                            -- Character:FindFirstChild("HumanoidRootPart").Anchored = true
                            if TargetPlayer and TargetPlayer.Character and TargetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                                tween(TargetPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame)
                            end
                        end
                        task.wait()
                    end
                end)
            else
                -- if Character and Character:FindFirstChild("HumanoidRootPart") then
                --     Character:FindFirstChild("HumanoidRootPart").Anchored = false
                -- end
                pcall(function() TweenService:Cancel() end)
                game.Workspace.Gravity = RealGravity
                Magnet = false
                --NoClip = false
            end
        end
    --NoClip
        if UserInput.KeyCode == Enum.KeyCode[NoClipKeyUpper] then
            if NoClip == false then
                NoClip = true
                for _,v in pairs(Character:GetDescendants()) do
                    if v:IsA("BasePart") then
                        if v.CanCollide == true then
                            table.insert(NoClipPartsTable,v)
                        end
                    end
                end
            else
                NoClip = false
                for _,v in pairs(NoClipPartsTable) do
                    v.CanCollide = true
                end
                table.clear(NoClipPartsTable)
                --game.Workspace.Gravity = RealGravity
            end
        end
    --Fall
        if UserInput.KeyCode == Enum.KeyCode[FallKeyUpper] then
            if FallOn and Character and Character:FindFirstChild("HumanoidRootPart") then
                Character:FindFirstChild("HumanoidRootPart").CFrame = Character:FindFirstChild("HumanoidRootPart").CFrame * CFrame.new(0,-3,0)
            end
        end
	--Attack
		if UserInput.KeyCode == Enum.KeyCode[AttackKeyUpper] then
            if Attacking then
                Attacking = false
                --Character:FindFirstChild("HumanoidRootPart").Anchored = false
            else
                Attacking = true
            end
		end
    --CopyPlayerList
        if UserInput.KeyCode == Enum.KeyCode[CopyPlayerListKeyUpper] then
            local Playerlist = ""
            for i,player in pairs(Players:GetPlayers()) do
                if player ~= Player then
                    Playerlist ..= i .. ". " .. player.DisplayName .. " / " .. player.Name .. "   "
                end
            end
            setclipboard(Playerlist)
        end
    end
end)

--Speed
local SpeedScreenGui = Instance.new("ScreenGui")
local SpeedTextBox = Instance.new("TextBox")

SpeedScreenGui.Parent = game:GetService("CoreGui")
SpeedScreenGui.Name = "Speed Gui"

SpeedTextBox.Parent = SpeedScreenGui
SpeedTextBox.BackgroundColor3 = Color3.new(0.333333, 0.333333, 0.333333)
SpeedTextBox.Position = UDim2.new(0, 0, 1, -50)
SpeedTextBox.Size = UDim2.new(0, 150, 0, 25)
SpeedTextBox.Font = Enum.Font.SourceSans
SpeedTextBox.Text = "Set Speed. Current Speed: " .. Character.Humanoid.WalkSpeed
SpeedTextBox.TextColor3 = Color3.new(1, 1, 1)
SpeedTextBox.TextScaled = true
SpeedTextBox.TextSize = 14
SpeedTextBox.TextWrapped = true
SpeedTextBox.BackgroundTransparency = 0.6
SpeedTextBox.FocusLost:Connect(function()
    if tonumber(SpeedTextBox.Text) ~= nil then
        Speed = tonumber(SpeedTextBox.Text)
    end
    SpeedTextBox.Text = "Current Speed: " .. Speed .. ". Orignal Speed: " .. OriginalSpeed .. "."
end)

spawn(function()
    while true do
        --pcall(function()
            if AttackOn then
                if Attacking and Character then
                    local Tool = Character:FindFirstChildWhichIsA("Tool")
                    if Tool then
                        if TargetPlayer and TargetPlayer.Character and TargetPlayer.Character:FindFirstChild("Humanoid") and TargetPlayer.Character.Humanoid.Health > 0 then
                            -- if Tool and Tool:FindFirstChild("Handle") and Tool.Handle.CanTouch == true then
                            --     for _,v in pairs(TargetPlayer.Character:GetChildren()) do
                            --         if v:IsA("BasePart") and v.CanTouch == true then
                            --             firetouchinterest(Tool.Handle,v,0)
                            --             firetouchinterest(Tool.Handle,v,1)
                            --         end
                            --     end
                            -- else
                                for _,v in pairs(Tool:GetDescendants()) do
                                    if v:IsA("BasePart") and v.CanTouch == true then
                                        for _,v2 in pairs(TargetPlayer.Character:GetChildren()) do
                                            if v2:IsA("BasePart") and v.CanTouch == true then
                                                firetouchinterest(v,v2,0)
                                                firetouchinterest(v,v2,1)
                                            end
                                        end
                                    end
                                end
                            --end
                        end
                        if AttackAllWithinRadius then
                            for _,v in pairs(Players:GetPlayers()) do
                                if v ~= Player and Character:FindFirstChild("HumanoidRootPart") and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 then
                                    if (Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).Magnitude <= AttackRadius then
                                        -- if Tool and Tool:FindFirstChild("Handle") and Tool.Handle.CanTouch == true then
                                        --     for _,v2 in pairs(v.Character:GetChildren()) do
                                        --         if v2:IsA("BasePart") and v.CanTouch == true then
                                        --             firetouchinterest(Tool.Handle,v2,0)
                                        --             firetouchinterest(Tool.Handle,v2,1)
                                        --         end
                                        --     end
                                        -- else
                                            for _,v2 in pairs(Tool:GetDescendants()) do
                                                if v2:IsA("BasePart") and v2.CanTouch == true then
                                                    for _,v3 in pairs(v.Character:GetChildren()) do
                                                        if v3:IsA("BasePart") and v3.CanTouch == true then
                                                            firetouchinterest(v2,v3,0)
                                                            firetouchinterest(v2,v3,1)
                                                        end
                                                    end
                                                end
                                            end
                                        --end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        --end)
        task.wait()
    end
end)

game:GetService("RunService").Stepped:Connect(function()
    Text = TargetTextBox.Text
    if Players:FindFirstChild(Text) then
        TargetPlayer = Players[Text]
    else
        for i,v in pairs(Players:GetPlayers()) do
            if v.DisplayName == Text then
                TargetPlayer = v
            end
        end
    end
    pcall(function()
--Speed Hacks
        if SpeedOn then
            Character.Humanoid.WalkSpeed = Speed
        end
--NoClip cont.
        if NoClip then
            for _,v in pairs(NoClipPartsTable) do
                v.CanCollide = false
            end
            --Originally the below was the code, but roblox patched. Temporary solution to go through walls until proper fix.
            --Character.Humanoid:ChangeState(11)
            --game.Workspace.Gravity = 0
        end
--SetCameraToPlayer cont.
        if CameraOn and Camera then
            CurrentCameraTarget = Text
            game.Workspace.CurrentCamera.CameraSubject = TargetPlayer.Character.HumanoidRootPart
            game.Workspace.CurrentCamera.CameraType = "Custom"
            Player.CameraMode = Enum.CameraMode.Classic
        elseif Camera then
            CurrentCameraTarget = nil
            if Character and Character:FindFirstChild("Humanoid") then
                game.Workspace.CurrentCamera.CameraSubject = Character.Humanoid
                game.Workspace.CurrentCamera.CameraType = "Custom"
                Player.CameraMode = Enum.CameraMode.Classic
            end
        end
    end)
end)
