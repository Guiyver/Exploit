repeat task.wait() until game:IsLoaded()

if _G.iuUHVZ90di0p3ZhVnmxjFAybfiYuvEFK4aWKL0aEMwrRaTuO3jZWdz == "iuUHVZ90di0p3ZhVnmxjFAybfiYuvEFK4aWKL0aEMwrRaTuO3jZWdz" then return end _G.iuUHVZ90di0p3ZhVnmxjFAybfiYuvEFK4aWKL0aEMwrRaTuO3jZWdz = "iuUHVZ90di0p3ZhVnmxjFAybfiYuvEFK4aWKL0aEMwrRaTuO3jZWdz"

local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer
local Mouse = player:GetMouse()
local PlayerGui = player:WaitForChild("PlayerGui")

local UnitFolder = workspace:WaitForChild("Units")
local EnemyFolder = workspace:WaitForChild("Enemy")
local Map = workspace:WaitForChild("Map")
local EquippedGui = PlayerGui:WaitForChild("InterFace"):WaitForChild("Equip")
local EquippedUnitFolder = EquippedGui:WaitForChild("Grid")
local CashAmount = EquippedGui:WaitForChild("Cash_Value")
local MeatAmount = EquippedGui:WaitForChild("Meat_Value")
local BossHPListFolder = PlayerGui:WaitForChild("Announce"):WaitForChild("HPList")
local WaveText = PlayerGui:WaitForChild("InterFace"):WaitForChild("Day")
local EnemySpawn = Map:WaitForChild("EnemySpawn")

local UnitGui = Instance.new("ScreenGui")
local UnitTextBox = Instance.new("TextBox")

UnitGui.Parent = CoreGui
UnitGui.Name = "Unit Gui"

UnitTextBox.Parent = UnitGui
UnitTextBox.BackgroundColor3 = Color3.new(0.333333, 0.333333, 0.333333)
UnitTextBox.Position = UDim2.new(0, 0, 1, -25)
UnitTextBox.Size = UDim2.new(0, 150, 0, 25)
UnitTextBox.Font = Enum.Font.SourceSans
UnitTextBox.Text = "Type Unit Slot or Name"
UnitTextBox.TextColor3 = Color3.new(1, 1, 1)
UnitTextBox.TextScaled = true
UnitTextBox.TextSize = 14
UnitTextBox.TextWrapped = true
UnitTextBox.BackgroundTransparency = 0.6

--Helper Functions
local function PlaceUnit(unit, placePosition)
    print("Placing " .. tostring(unit) .. " at " .. tostring(placePosition))
    ReplicatedStorage.Remote.SpawnUnit:InvokeServer(unit, placePosition)
end

local function UpgradeUnit(unit)
    ReplicatedStorage.Remote.UpgradeUnit:InvokeServer(unit)
end

local function UseSkill(unit, abilityName)
    ReplicatedStorage.Remote.UnitAbility:FireServer(unit.ability, abilityName, unit)
end

local function GetDistance(obj1,obj2)
    return (obj1.Position - obj2.Position).Magnitude - math.abs(obj1.Position.Y - obj2.Position.Y)
end

local function onMouseClick(mouse)
    local ray = Ray.new(
        mouse.UnitRay.Origin,
        mouse.UnitRay.Direction * 1000
    )
    local hit, position = game.Workspace:FindPartOnRay(ray, game.Players.LocalPlayer.Character, false, true)
    if hit then
        local clickedCFrame = CFrame.new(position)
        clickedCFrame = clickedCFrame * CFrame.new(0,2.7,0)
        if clickedCFrame then
            if tonumber(UnitTextBox.Text) then
                for _,unit in pairs(EquippedUnitFolder:GetChildren()) do
                    if unit:IsA("ImageLabel") and unit.Name:find(tostring(UnitTextBox.Text)) then
                        local unitname = unit.ViewportFrame.WorldModel:FindFirstChildWhichIsA("Model").Name
                        PlaceUnit(unitname,clickedCFrame)
                    end
                end
            else
                PlaceUnit(UnitTextBox.Text,clickedCFrame)
            end
        end
    end
end

Mouse.Button1Down:Connect(function()
    if not UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then return end
    if not Mouse.Target then return end
    onMouseClick(Mouse)
end)

if AutoStart or (AutoSpeed and SpeedLevel > 1 and SpeedLevel <= 3) or AutoSkip then
    --Pause just to be safe on loading
    task.wait(5)
end
if AutoStart then
    --Ready
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("SkipEvent"):FireServer()
end
task.spawn(function()
    if AutoStart then
        task.wait(.5)
    end
    if AutoSpeed and SpeedLevel > 1 and SpeedLevel <= 3 then
        --ChangeSpeed
        local args = {
            [1] = "x" .. SpeedLevel-1 .. " Speed"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("x2Event"):FireServer(unpack(args))
        task.wait(.5)
    end
    if AutoSkip then
        --AutoSkip
        local args = {
            [1] = "AutoSkip"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Setting"):FireServer(unpack(args))
    end
end)
task.spawn(function()
    local function FindSkills()
        for _,unit in pairs(UnitFolder:GetChildren()) do
            if unit:FindFirstChild("HumanoidRootPart") and unit:FindFirstChild("ability") and not unit:FindFirstChild("SkillCD") then
                local unitroot = unit.HumanoidRootPart
                if OnlyUseSkillWhenUnitApproached then
                    local enemynearby = false
                    for _,enemy in pairs(EnemyFolder:GetChildren()) do
                        if GetDistance(enemy,unitroot) < 3 then
                            enemynearby = true
                        end
                    end
                    if enemynearby then
                        local skillname = unit.ability:FindFirstChildWhichIsA("LocalScript")
                        if skillname then
                            UsedSkill = true
                            skillname = skillname.Name
                            UseSkill(unit,skillname)
                            task.wait(1)
                        end
                    end
                else
                    local skillname = unit.ability:FindFirstChildWhichIsA("LocalScript")
                    if skillname then
                        UsedSkill = true
                        skillname = skillname.Name
                        UseSkill(unit,skillname)
                        task.wait(1)
                    end
                end
            end
        end
    end
    while true do
        if AutoSkill then
            if OnlyUseSkillOnBoss or OnlyUseSkillLastWave then
                local function extractWaveNumbers(str)
                    local currentWave, maxWave = str:match("Wave (%d+)/(%d+)")
                    if currentWave and maxWave then
                        currentWave = tonumber(currentWave)
                        maxWave = tonumber(maxWave)
                        return currentWave, maxWave
                    end
                end
                if OnlyUseSkillOnBoss and OnlyUseSkillLastWave then
                    local currentWave, maxWave = extractWaveNumbers(WaveText.Text)
                    if currentWave and maxWave then
                        if currentWave == maxWave and BossHPListFolder:FindFirstChild("BossHPBar") then
                            FindSkills()
                        end
                    elseif BossHPListFolder:FindFirstChild("BossHPBar") then
                        FindSkills()
                    else
                        for _,unit in pairs(UnitFolder:GetChildren()) do
                            if table.find(UnitSkillExceptions,unit.Name) and unit:FindFirstChild("ability") and not unit:FindFirstChild("SkillCD") then
                                local skillname = unit.ability:FindFirstChildWhichIsA("LocalScript")
                                if skillname then
                                    skillname = skillname.Name
                                    UseSkill(unit,skillname)
                                    task.wait(1)
                                end
                            end
                        end
                    end
                elseif OnlyUseSkillOnBoss then
                    if BossHPListFolder:FindFirstChild("BossHPBar") then
                        FindSkills()
                    end
                elseif OnlyUseSkillLastWave then
                    local currentWave, maxWave = extractWaveNumbers(WaveText.Text)
                    if currentWave and maxWave then
                        if currentWave == maxWave then
                            FindSkills()
                        end
                    end
                end
            else
                FindSkills()
            end
            for _,unit in pairs(UnitFolder:GetChildren()) do
                if table.find(UnitSkillExceptions,unit.Name) and unit:FindFirstChild("ability") and not unit:FindFirstChild("SkillCD") then
                    local skillname = unit.ability:FindFirstChildWhichIsA("LocalScript")
                    if skillname then
                        skillname = skillname.Name
                        UseSkill(unit,skillname)
                        task.wait(1)
                    end
                end
            end
        end
        task.wait()
    end
end)

task.spawn(function()
    while true do
        if MeatAmount.Visible then
            if AutoFeedUnits then
                for _,unit in pairs(UnitFolder:GetChildren()) do
                    if unit:FindFirstChild("Info") and unit.Info:FindFirstChild("Owner") and unit.Info.Owner.Value == player.Name and unit.Info:FindFirstChild("STA") and unit.Info.STA.Value <= 10 then
                        game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("FeedAll"):InvokeServer()
                        task.wait(1)
                        break
                    end
                end
            end
        end
        task.wait()
    end
end)

task.spawn(function()
    while true do
        if MeatAmount.Visible then
            if AutoBuyFood then
                local totalsta = 0
                for _,unit in pairs(UnitFolder:GetChildren()) do
                    if unit:FindFirstChild("Info") and unit.Info:FindFirstChild("Owner") and unit.Info.Owner.Value == player.Name and unit.Info:FindFirstChild("MaxSTA") then
                        totalsta += unit.Info.MaxSTA.Value
                    end
                end
                local foodneeded = (totalsta * .5) / 10 --1 Food = 10 STA. I'm trying to keep enough food on hand to always heal 75% of STA
                if tonumber(MeatAmount.Text) < foodneeded and tonumber(CashAmount.Text) >= 500 then
                    local beforecash = tonumber(CashAmount.Text)
                    local beforemeat = tonumber(MeatAmount.Text)
                    local args = {
                        [1] = 10
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("BuyMeat"):InvokeServer(unpack(args))
                    task.wait(.1)
                    if beforecash < tonumber(CashAmount.Text) and beforemeat == tonumber(MeatAmount.Text) then
                        local loop = 0
                        repeat
                            task.wait(.1)
                            loop += 1
                        until beforemeat < tonumber(MeatAmount.Text) or loop == 39
                    end
                end
            end
        end
        task.wait()
    end
end)

local pathmergedwaypoint = nil
local duplicateexists = false
local waypoints = {}
local potentialpaths = {}

local NumberOfWayPointFolders = 0
for _,v in pairs(Map:GetChildren()) do
    if v.Name:find("WayPoint") then
        NumberOfWayPointFolders += 1
        for _,waypoint in pairs(v:GetChildren()) do
            table.insert(waypoints,waypoint)
        end
    end
end
if NumberOfWayPointFolders > 1 then
    duplicateexists = true
end
for _,waypoint in pairs(waypoints) do
    if duplicateexists then
        local duplicatefound = false
        for _,waypoint2 in pairs(waypoints) do
            if waypoint ~= waypoint2 and waypoint.Name == waypoint2.Name then
                duplicatefound = true
                if GetDistance(waypoint,waypoint2) < 1 then
                    table.insert(potentialpaths,waypoint)
                end
                break
            end
        end
        if not duplicatefound then
            if pathmergedwaypoint then
                if tonumber(pathmergedwaypoint) > tonumber(waypoint) then
                    pathmergedwaypoint = waypoint
                end
            else
                pathmergedwaypoint = waypoint
            end
        end
    end
end
if not pathmergedwaypoint and #potentialpaths > 0 then
    local furthestwaypoint = nil
    for _,waypoint in pairs(potentialpaths) do
        if furthestwaypoint then
            if tonumber(waypoint.Name) < tonumber(furthestwaypoint.Name) then
                furthestwaypoint = waypoint
            end
        else
            furthestwaypoint = waypoint
        end
    end
    pathmergedwaypoint = furthestwaypoint
end

local printcount = 0
task.spawn(function()
    while true do
        printcount += 1
        if printcount == 10 then
            warn("This should never have happened. Like ever.")
        end
        task.wait(1)
    end
end)

local lastplacedunit = nil
while true do
    printcount = 0 -- For the task function above. If the script gets stuck somewhere, it'll make a print that it stopped looping.
    if AutoPlace or AutoUpgrade then
        local function GetUnitsOwned()
            local unitsownedtable = {}
            for _,unit in pairs(UnitFolder:GetChildren()) do
                if unit:FindFirstChild("Info") and unit.Info:FindFirstChild("Owner") and unit.Info.Owner.Value == player.Name then
                    table.insert(unitsownedtable,unit)
                end
            end
        end
        local function GetWayPoint(enemy)
            local closestwaypoint
            local secondclosestwaypoint
            for _,waypoint in pairs(waypoints) do
                if closestwaypoint then
                    if GetDistance(enemy,waypoint) < GetDistance(enemy,closestwaypoint) then
                        closestwaypoint = waypoint
                    end
                else
                    closestwaypoint = waypoint
                end
            end
            if closestwaypoint then
                for _,waypoint in pairs(waypoints) do
                    if closestwaypoint.Name ~= waypoint.Name and math.abs(tonumber(waypoint.Name) - tonumber(closestwaypoint.Name)) <= 1 then
                        if secondclosestwaypoint then
                            if GetDistance(enemy,waypoint) < GetDistance(enemy,secondclosestwaypoint) then
                                secondclosestwaypoint = waypoint
                            end
                        else
                            secondclosestwaypoint = waypoint
                        end
                    end
                end
            end
            if closestwaypoint and secondclosestwaypoint then
                local biggerwaypoint
                if tonumber(closestwaypoint.Name) > tonumber(secondclosestwaypoint.Name) then
                    return closestwaypoint
                else
                    return secondclosestwaypoint
                end
            else
                return nil
            end
        end
        local furthestwaypointreached = nil
        for _,enemy in pairs(EnemyFolder:GetChildren()) do
            local currentwaypoint = GetWayPoint(enemy)
            if currentwaypoint then
                if furthestwaypointreached then
                    if tonumber(furthestwaypointreached.Name) < tonumber(currentwaypoint.Name) then
                        furthestwaypointreached = currentwaypoint
                    end
                else
                    furthestwaypointreached = currentwaypoint
                end
            end
        end
        local unitplaceattempted = false
        local unitsbeforeplace = nil
        if AutoPlace then
            --The below is for the Tomb of The Star Raid SPECIFICALLY.
            if EnemyFolder:FindFirstChild("Sorcerer Killer") and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and GetDistance(EnemyFolder["Sorcerer Killer"],player.Character.HumanoidRootPart) < 30 then
                local strongestunitoutofrange,dps = nil,nil
                for _,unit in pairs(UnitFolder:GetChildren()) do
                    local unitroot = unit:FindFirstChild("HumanoidRootPart")
                    if unitroot and GetDistance(EnemyFolder["Sorcerer Killer"],unitroot) >= 30 and unit:FindFirstChild("Info") and unit.Info:FindFirstChild("ATK") and unit.Info:FindFirstChild("SPA") then
                        if strongestunitoutofrange then
                            if dps < unit.Info.ATK.Value/unit.Info.SPA.Value then
                                strongestunitoutofrange = unitroot
                                dps = unit.Info.ATK.Value/unit.Info.SPA.Value
                            end
                        else
                            strongestunitoutofrange = unitroot
                            dps = unit.Info.ATK.Value/unit.Info.SPA.Value
                        end
                    end
                end
                if strongestunitoutofrange then
                    player.Character.HumanoidRootPart.CFrame = strongestunitoutofrange.CFrame
                end
            end
            --Normal script continues...
            local priorityenemy = nil
            if pathmergedwaypoint then
                priorityenemy = pathmergedwaypoint
            end
            local function GetPriorityEnemy()
                for _,enemy in pairs(EnemyFolder:GetChildren()) do
                    if GetDistance(enemy,EnemySpawn) >= MinimumSpaceBetweenUnits then
                        local TooCloseToExistingUnit = false
                        for _,unit in pairs(UnitFolder:GetChildren()) do
                            local unitroot = unit:FindFirstChild("HumanoidRootPart")
                            if unitroot then
                                if GetDistance(enemy,unitroot) < MinimumSpaceBetweenUnits then
                                    TooCloseToExistingUnit = true
                                    break
                                end
                            else
                                warn("Can't find the unit root bruh")
                            end
                        end
                        if not TooCloseToExistingUnit then
                            if not priorityenemy then
                                priorityenemy = enemy
                            elseif GetDistance(enemy,furthestwaypointreached) < GetDistance(priorityenemy,furthestwaypointreached) then
                                priorityenemy = enemy
                            end
                        end
                    end
                end
            end
            if furthestwaypointreached then
                if pathmergedwaypoint then
                    if tonumber(furthestwaypointreached) > tonumber(pathmergedwaypoint) then
                        GetPriorityEnemy()
                    end
                else
                    GetPriorityEnemy()
                end
            end
            if priorityenemy then
                -- print("priorityenemy is " .. tostring(priorityenemy))
                local function AutoPlace()
                    local chosenslot
                    if lastplacedunit and AutoPlaceSlots[lastplacedunit+1] then
                        chosenslot = lastplacedunit + 1
                    else
                        chosenslot = 1
                    end
                    local chosenunit = nil
                    local cost = nil
                    for _,unit in pairs(EquippedUnitFolder:GetChildren()) do
                        if unit:IsA("ImageLabel") and unit.Name:find(tostring(AutoPlaceSlots[chosenslot])) then
                            cost = tonumber(unit.Cash.Text)
                            chosenunit = unit.ViewportFrame.WorldModel:FindFirstChildWhichIsA("Model")
                        end
                    end
                    if chosenunit and cost then
                        unitplaceattempted = true
                        if tonumber(CashAmount.Text) >= cost then
                            local unitnumber = 0
                            for _,unit in pairs(UnitFolder:GetChildren()) do
                                if unit.Name == chosenunit.Name and unit:FindFirstChild("Info") and unit.Info:FindFirstChild("Owner") and unit.Info.Owner.Value == player.Name then
                                    unitnumber += 1
                                end
                            end
                            if unitnumber < MaxUnitAmount then
                                unitsbeforeplace = GetUnitsOwned()
                                if TeleportToPlaceLocation and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                                    player.Character.HumanoidRootPart.CFrame = priorityenemy.CFrame
                                end
                                PlaceUnit(chosenunit.Name,priorityenemy.CFrame)
                                local loop = 0
                                repeat
                                    loop += 1
                                    if loop % 5 == 0 then
                                        if TeleportToPlaceLocation and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                                            player.Character.HumanoidRootPart.CFrame = priorityenemy.CFrame
                                        end
                                        PlaceUnit(chosenunit.Name,priorityenemy.CFrame)
                                    end
                                    task.wait(.1)
                                until #UnitFolder:GetChildren() > #unitsbeforeplace or loop == 20
                            end
                            lastplacedunit = chosenslot
                        end
                    else
                        warn("I don't think this should be happening 1")
                        lastplacedunit = chosenslot
                    end
                end
                if OnlyPlaceWhenUnitsPassed then
                    local closestunit = nil
                    for _,unit in pairs(UnitFolder:GetChildren()) do
                        local unitroot = unit:FindFirstChild("HumanoidRootPart")
                        if unitroot then
                            if closestunit then
                                if GetDistance(closestunit,furthestwaypointreached) > GetDistance(unitroot,furthestwaypointreached) then
                                    closestunit = unitroot
                                end
                            else
                                closestunit = unitroot
                            end
                        end
                    end
                    if closestunit then
                        if GetDistance(priorityenemy,furthestwaypointreached) < GetDistance(closestunit,furthestwaypointreached) then
                            AutoPlace()
                        end
                    else
                        AutoPlace()
                    end
                else
                    AutoPlace()
                end
            end
        end
        if AutoUpgrade then
            local function AutoUpgradeFunc()
                local unitsowned = GetUnitsOwned()
                if #unitsowned >= UnitsRequiredToUpgrade then
                    local upgradeableunit = nil
                    for _,unit in pairs(UnitFolder:GetChildren()) do
                        if unit:FindFirstChild("Info") and unit.Info:FindFirstChild("UpgradeCost") and unit.Info:FindFirstChild("Owner") and unit.Info:FindFirstChild("Upgrade") then
                            if unit.Info.Owner.Value ~= unit.Name and unit.Info.UpgradeCost.Value > 0 and unit.Info.UpgradeCost.Value <= player.leaderstats.Cash.Value then
                                local function CheckUpgrade()
                                    if OnlyUpgradeList then
                                        if UpgradeList[unit.Name] and unit.Info.Upgrade.Value < UpgradeList[unit.Name] then
                                            if OnlyUpgradeOwned then
                                                if unit.Info.Owner.Value == player.Name then
                                                    upgradeableunit = unit
                                                end
                                            else
                                                upgradeableunit = unit
                                            end
                                        else
                                            local FoundUnit = false
                                            for i,v in pairs(UpgradeList) do
                                                if type(i) == "number" then
                                                    for _,equippedunit in pairs(EquippedUnitFolder:GetChildren()) do
                                                        if equippedunit:IsA("ImageLabel") and equippedunit.Name:find(tostring(i)) then
                                                            local equippedunitname = equippedunit.ViewportFrame.WorldModel:FindFirstChildWhichIsA("Model").Name
                                                            if equippedunitname == unit.Name then
                                                                if unit.Info.Upgrade.Value < v then
                                                                    FoundUnit = true
                                                                end
                                                                break
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                            if FoundUnit then
                                                if OnlyUpgradeOwned then
                                                    if unit.Info.Owner.Value == player.Name then
                                                        upgradeableunit = unit
                                                    end
                                                else
                                                    upgradeableunit = unit
                                                end
                                            end
                                        end
                                    elseif unit.Info.Upgrade.Value < MaxUpgrade then
                                        if OnlyUpgradeOwned then
                                            if unit.Info.Owner.Value == player.Name then
                                                upgradeableunit = unit
                                            end
                                        else
                                            upgradeableunit = unit
                                        end
                                    end
                                end
                                if upgradeableunit then
                                    if unit.Info.UpgradeCost.Value < upgradeableunit.Info.UpgradeCost.Value then
                                        CheckUpgrade()
                                    end
                                else
                                    CheckUpgrade()
                                end
                            end
                        end
                    end
                    if upgradeableunit then
                        UpgradeUnit(upgradeableunit)
                        task.wait(.5)
                    else
                        task.wait()
                    end
                else
                    task.wait()
                end
            end
            if DontUpgradeIfPassed and unitplaceattempted then
                if unitsbeforeplace then
                    local currentunits = GetUnitsOwned()
                    if #unitsbeforeplace < #currentunits then
                        AutoUpgradeFunc()
                    else
                        task.wait()
                    end
                else
                    task.wait()
                end
            else
                AutoUpgradeFunc()
            end
        else
            task.wait()
        end
    else
        task.wait()
    end
end
