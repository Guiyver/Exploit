repeat task.wait() until game:IsLoaded()

if _G.iuUHVZ90di0p3ZhVnmxjFAybfiYuvEFK4aWKL0aEMwrRaTuO3jZWdz == "iuUHVZ90di0p3ZhVnmxjFAybfiYuvEFK4aWKL0aEMwrRaTuO3jZWdz" then return end _G.iuUHVZ90di0p3ZhVnmxjFAybfiYuvEFK4aWKL0aEMwrRaTuO3jZWdz = "iuUHVZ90di0p3ZhVnmxjFAybfiYuvEFK4aWKL0aEMwrRaTuO3jZWdz"

local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local player = Players.LocalPlayer
local Mouse = player:GetMouse()
local PlayerGui = player:WaitForChild("PlayerGui")

local UnitFolder = Workspace:WaitForChild("Units")
local EnemyFolder = workspace:WaitForChild("Enemy")
local WaypointFolder = workspace:WaitForChild("Map"):WaitForChild("WayPoint")
local EquippedGui = PlayerGui:WaitForChild("InterFace"):WaitForChild("Equip")
local EquippedUnitFolder = EquippedGui:WaitForChild("Grid")
local CashAmount = EquippedGui:WaitForChild("Cash_Value")

local UnitGui = Instance.new("ScreenGui")
local UnitTextBox = Instance.new("TextBox")

UnitGui.Parent = CoreGui
UnitGui.Name = "Unit Gui"

UnitTextBox.Parent = UnitGui
UnitTextBox.BackgroundColor3 = Color3.new(0.333333, 0.333333, 0.333333)
UnitTextBox.Position = UDim2.new(0, 0, 1, -25)
UnitTextBox.Size = UDim2.new(0, 150, 0, 25)
UnitTextBox.Font = Enum.Font.SourceSans
UnitTextBox.Text = "Type Unit Slot or Name"
UnitTextBox.TextColor3 = Color3.new(1, 1, 1)
UnitTextBox.TextScaled = true
UnitTextBox.TextSize = 14
UnitTextBox.TextWrapped = true
UnitTextBox.BackgroundTransparency = 0.6


local function PlaceUnit(unit,placeposition)
    local args = {
        [1] = unit,
        [2] = placeposition
    }
    game:GetService("ReplicatedStorage").Remote.SpawnUnit:InvokeServer(unpack(args))
end

local function UpgradeUnit(unit)
    local args = {
        [1] = unit
    }
    game:GetService("ReplicatedStorage").Remote.UpgradeUnit:InvokeServer(unpack(args))
end

local function UseSkill(unit,abilityname)
    local args = {
        [1] = unit.ability,
        [2] = abilityname,
        [3] = unit
    }
    game:GetService("ReplicatedStorage").Remote.UnitAbility:FireServer(unpack(args))
end

local function onMouseClick(mouse)
    local ray = Ray.new(
        mouse.UnitRay.Origin,
        mouse.UnitRay.Direction * 1000
    )
    local hit, position = game.Workspace:FindPartOnRay(ray, game.Players.LocalPlayer.Character, false, true)
    if hit then
        local clickedCFrame = CFrame.new(position)
        clickedCFrame = clickedCFrame * CFrame.new(0,2.7,0)
        if clickedCFrame then
            if tonumber(UnitTextBox.Text) then
                for _,unit in pairs(EquippedUnitFolder:GetChildren()) do
                    if unit:IsA("ImageLabel") and string.find(unit.Name,tostring(UnitTextBox.Text)) then
                        local unitname = unit:WaitForChild("ViewportFrame"):WaitForChild("WorldModel"):FindFirstChildWhichIsA("Model").Name
                        PlaceUnit(unitname,clickedCFrame)
                    end
                end
            else
                PlaceUnit(UnitTextBox.Text,clickedCFrame)
            end
        end
    end
end

Mouse.Button1Down:Connect(function()
    if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then return end
    if not Mouse.Target then return end
    onMouseClick(Mouse)
end)

local lastwaypoint = nil
for _,waypoint in pairs(WaypointFolder:GetChildren()) do
    if not lastwaypoint then
        lastwaypoint = waypoint
    elseif tonumber(waypoint.Name) > tonumber(lastwaypoint.Name) then
        lastwaypoint = waypoint
    end
end

if AutoPlace then
    --Pause just to be safe on loading
    task.wait(3)

    --Ready
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("SkipEvent"):FireServer()
    task.wait(.5)

    --ChangeSpeed3x
    local args = {
        [1] = "x2 Speed"
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("x2Event"):FireServer(unpack(args))
    task.wait(.5)

    --AutoSkip
    local args = {
        [1] = "AutoSkip"
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Setting"):FireServer(unpack(args))
end

task.spawn(function()
    while true do
        if AutoSkill then
            for _,unit in pairs(UnitFolder:GetChildren()) do
                if unit:FindFirstChild("ability") then
                    local skillname = unit.ability:FindFirstChildWhichIsA("LocalScript")
                    if skillname then
                        skillname = skillname.Name
                        UseSkill(unit,skillname)
                        task.wait(1)
                    end
                end
            end
        end
        task.wait()
    end
end)

local lastplacedunit = nil

while true do
    if AutoPlace then
        local priorityenemy = nil
        for _,enemy in pairs(EnemyFolder:GetChildren()) do
            if not priorityenemy then
                priorityenemy = enemy
            elseif (enemy.Position - lastwaypoint.Position).Magnitude < (priorityenemy.Position - lastwaypoint.Position).Magnitude then
                priorityenemy = enemy
            end
        end
        if priorityenemy then
            local chosenslot
            if lastplacedunit then
                chosenslot = lastplacedunit
                repeat
                    chosenslot += 1
                    if chosenslot > 6 then
                        chosenslot = 1
                    end
                until table.find(AutoPlaceSlots,chosenslot)
            else
                chosenslot = AutoPlaceSlots[1]
            end
            local chosenunit
            local cost
            for _,unit in pairs(EquippedUnitFolder:GetChildren()) do
                if unit:IsA("ImageLabel") and string.find(unit.Name,tostring(chosenslot)) then
                    cost = tonumber(unit:WaitForChild("Cash").Text)
                    chosenunit = unit:WaitForChild("ViewportFrame"):WaitForChild("WorldModel"):FindFirstChildWhichIsA("Model")
                end
            end
            if tonumber(CashAmount.Text) >= cost then
                PlaceUnit(chosenunit.Name,priorityenemy.CFrame)
                lastplacedunit = chosenslot
                task.wait(.2)
            end
        end
    end
    if AutoUpgrade then
        local upgradeableunit = nil
        for _,unit in pairs(UnitFolder:GetChildren()) do
            if unit:FindFirstChild("Info") and unit.Info:FindFirstChild("UpgradeCost") and unit.Info:FindFirstChild("Owner") and unit.Info:FindFirstChild("Upgrade") then
                if unit.Info.Owner.Value ~= unit.Name and unit.Info.UpgradeCost.Value > 0 and unit.Info.UpgradeCost.Value <= player:WaitForChild("leaderstats"):WaitForChild("Cash").Value and unit.Info.Upgrade.Value < MaxUpgrade then
                    if OnlyUpgradeList then
                        if table.find(UpgradeList,unit.Name) then
                            if OnlyUpgradeOwned then
                                if unit.Info.Owner.Value == player.Name then
                                    upgradeableunit = unit
                                    break
                                end
                            else
                                upgradeableunit = unit
                                break
                            end
                        else
                            local FoundUnit = false
                            for _,v in pairs(UpgradeList) do
                                if type(v) == "number" then
                                    for _,equippedunit in pairs(EquippedUnitFolder:GetChildren()) do
                                        if equippedunit:IsA("ImageLabel") and string.find(equippedunit.Name,tostring(v)) then
                                            local equippedunitname = equippedunit:WaitForChild("ViewportFrame"):WaitForChild("WorldModel"):FindFirstChildWhichIsA("Model").Name
                                            if equippedunitname == unit.Name then
                                                FoundUnit = true
                                                break
                                            end
                                        end
                                    end
                                end
                            end
                            if FoundUnit then
                                if OnlyUpgradeOwned then
                                    if unit.Info.Owner.Value == player.Name then
                                        upgradeableunit = unit
                                        break
                                    end
                                else
                                    upgradeableunit = unit
                                    break
                                end
                            end
                        end
                    else
                        if OnlyUpgradeOwned then
                            if unit.Info.Owner.Value == player.Name then
                                upgradeableunit = unit
                                break
                            end
                        else
                            upgradeableunit = unit
                            break
                        end
                    end
                end
            end
        end
        if upgradeableunit then
            -- print("Upgraded " .. upgradeableunit.Name)
            UpgradeUnit(upgradeableunit)
            task.wait(.2)
        else
            task.wait()
        end
    else
        task.wait()
    end
end
