
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local Character = player.Character or player.CharacterAdded:Wait()
player.CharacterAdded:Connect(function(v) Character = v end)

local leaderstats = player:WaitForChild("leaderstats")
local stage = leaderstats:FindFirstChild("Stage") or leaderstats:FindFirstChild("Stages")

local function extractNumber(str)
    local match = tostring(str):match("%d+%.?%d*")
    return match and tonumber(match)
end

local currentstage

local function searchForFolder(v)
    local number = extractNumber(v)
    if number and #v.Parent:GetChildren() > 2 then
        local foundStages, foundCurrentStage = 1, number == currentstage
        for _, child in pairs(v.Parent:GetChildren()) do
            local childNumber = extractNumber(child)
            if childNumber then
                foundStages = foundStages + 1
                foundCurrentStage = foundCurrentStage or childNumber == currentstage
            end
        end
        if foundStages > #v.Parent:GetChildren() / 2 and foundCurrentStage then
            return v.Parent
        end
    end
end

local function findCheckpointFolder()
    local function search(workspaceChildren)
        for _, v in pairs(workspaceChildren) do
            if v:IsA("SpawnLocation") or v:IsA("BasePart") or v:IsA("Model") then
                local folder = searchForFolder(v)
                if folder then return folder end
            end
        end
    end

    return search(workspace:GetDescendants()) or warn("ERROR: Checkpoints not found!")
end

local function teleportToStage(v, number)
    if number == currentstage + 1 then
        repeat
            task.wait()
        until Character and Character:FindFirstChild("HumanoidRootPart")
        Character.HumanoidRootPart.CFrame = v.CFrame * CFrame.new(0, 2, 0)
        currentstage = currentstage + 1
        task.wait(WaitBetweenTeleport)
        return true
    end
end

local function doObby()
    currentstage = currentstage or (Start == "Current Stage" and stage and stage.Value) or Start
    if not currentstage then return true end -- Exit if no current stage found

    local checkpointfolder = findCheckpointFolder()
    if not checkpointfolder then return end

    while currentstage < Finish do
        local stagefound = false
        for _, v in pairs(checkpointfolder:GetChildren()) do
            local number = extractNumber(v)
            if number then
                local teleportTarget = v:IsA("BasePart") and v or v:FindFirstChildWhichIsA("BasePart", true)
                if teleportTarget then
                    stagefound = teleportToStage(teleportTarget, number) or stagefound
                else
                    warn("ERROR: Checkpoint is neither a BasePart nor Model. Needs updating.")
                end
            end
        end
        if not stagefound then break end
    end
end

if Looped then
    while Looped do
        if doObby() then break end
        task.wait()
    end
else
    doObby()
end
